/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.5.2'
    id "org.sonarqube" version "3.0"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    testImplementation 'org.jbehave:jbehave-core:4.7'
    testImplementation 'com.github.valfirst:jbehave-junit-runner:2.3.0'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.0'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

apply plugin: 'java'

test {
    dependsOn cleanTest
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport // report is always generated after tests run
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled false
        csv.enabled false
    }
}

jacoco {
    toolVersion = "0.8.6"
}

pitest {
    targetClasses = ['lpdioc.*']  
    junit5PluginVersion = '0.12'
    threads = 4
    outputFormats = ['HTML']
    timestampedReports = false
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}








